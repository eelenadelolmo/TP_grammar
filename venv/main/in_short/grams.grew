rule cobj_subordination {
  pattern {
    R -[cobj]-> A;
    R -[cobj]-> B;
    A << B;
  }
  commands {
    del_edge R -[cobj]-> B;
    add_edge A -[cobj]-> B;
  }
}

strat S1 { Onf ( cobj_subordination ) }




####




rule subordinate_dobj_clause {
  pattern {
    N0 -[nsubj]-> S;
    N0 -[dobj]-> N1;
    N1 -[cobj]-> N2;
  }
  commands {
    S.rep=yes;
    S.recursive=yes;
    N2.main=yes;
    N2.recursive=yes;
  }
}

rule main_root {
  pattern {
    X -[root]-> R;
  }
  commands {
    R.main=yes;
    R.recursive=yes;
  }
}

strat S1 { Try ( If ( subordinate_dobj_clause, Iter ( subordinate_dobj_clause ), main_root ) ) }




####



rule nsubj_ellision_rep {
  pattern {
    X -[root]-> N0;
    N0 -[nsubj]-> S;
    N0 -[dobj]-> N1;
    N1 -[cobj]-> N2;
    N2.upos = re"v.+";
  }
  without {
    N2 -[nsubj]-> S2;
  }
  commands {
    del_edge N0 -[nsubj]-> S;
    add_edge N2 -[nsubj]-> S;
    N2.main=yes;
    N2.recursive=yes;
  }
}

strat S1 { Onf ( nsubj_ellision_rep ) }




####



rule preceding_subject {
  pattern {
    R [ main="yes" ];
    S [ main="yes" ];
    R -[nsubj]-> S;
    S << R;
  }
  commands {
    S.theme=yes;
    S.recursive=yes;
  }
}


strat S1 { Try ( Iter ( preceding_subject ) ) }



####



rule preceding_subject_first {
  pattern {
    R1 [ theme="no" ];
    T1 [ theme="yes" ];
    R1 -[nsubj]-> T1;
    R2 [ theme="no" ];
    T2 [ theme="yes" ];
    R2 -[nsubj]-> T2;
    T1 << T2;
  }
  commands {
    T2.theme=no;
    T2.recursive=yes;
  }
}

strat S1 { Try ( Iter ( preceding_subject_first ) ) }




####




rule ignore_satellites_root_advmod {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[advmod]-> C;
  }
  commands {
    C.main=no;
    C.recursive=yes;
  }
}

rule ignore_satellites_root_advcl {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[advcl]-> C;
  }
  commands {
    C.main=no;
    C.recursive=yes;
  }
}

rule ignore_satellites_root_prepv {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[prepv]-> C;
  }
  commands {
    C.main=no;
    C.recursive=yes;
  }
}

rule ignore_satellites_root_prep {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[prep]-> C;
  }
  commands {
    C.main=no;
    C.recursive=yes;
  }
}

rule ignore_satellites_root_cc {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[cc]-> C;
  }
  commands {
    C.main=no;
    C.recursive=yes;
  }
}

rule ignore_satellites_root_rcmod {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[rcmod]-> C;
  }
  commands {
    C.main=no;
    C.recursive=yes;
  }
}

rule ignore_satellites_root_punct {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[punct]-> C;
  }
  commands {
    C.main=no;
    C.recursive=yes;
  }
}

rule ignore_satellites_root_coord_fixed {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[coord_fixed]-> C;
  }
  commands {
    C.main=no;
    C.recursive=yes;
  }
}

strat S1 { Try ( Iter ( Alt ( ignore_satellites_root_advmod, ignore_satellites_root_advcl, ignore_satellites_root_prepv, ignore_satellites_root_prep, ignore_satellites_root_cc, ignore_satellites_root_rcmod, ignore_satellites_root_punct, ignore_satellites_root_coord_fixed ) ) ) }




####




rule ignore_only_preps_satellites {
  pattern {
    X -[root]-> R;
    R [ main="yes" ];
    R -[prep|prepv]-> C;
  }
  without {
    R -[dobj]-> *;
  }
  commands {
    C.main=yes;
    C.recursive=yes;
  }
}

strat S1 { Try ( Iter ( ignore_only_preps_satellites ) ) }



####



rule ignore_only_preps_satellites_sub {
  pattern {
    X -[^root]-> R;
    R [ main="yes" ];
    R -[prep|prepv]-> C;
  }
  without {
    R -[dobj]-> *;
  }
  commands {
    C.main=yes;
    C.recursive=yes;
  }
}

strat S1 { Try ( Iter ( ignore_only_preps_satellites_sub ) ) }



####



rule rheme {
  pattern {
    T [ theme="yes" ];
    V -> T;
    V [ theme="no", main="yes" ];
    C [ main=yes, theme="no" ];
    V -[^advcl|advmod|coord_fixed]-> C;
    T << C;
  }
  commands {
    V.rheme=yes;
    C.rheme=yes;
    C.recursive=yes;
  }
}

strat S1 { Iter ( Try ( rheme ) ) }



####



rule rheme_not_rcmod {
  pattern {
    R [ rheme="yes" ];
    X -[^prepv|prepn]-> R;
    R -[rcmod]-> C;
  }
  commands {
    C.rheme="no";
    C.recursive=yes;
  }
}

rule rheme_not_punct {
  pattern {
    R [ rheme="yes" ];
    R -[punct]-> C;
  }
  commands {
    C.rheme=no;
    C.recursive=yes;
  }
}

strat S1 { Iter ( Try ( Alt ( rheme_not_rcmod ) ) ) }




####



rule annotated_reported_ellided_nsubj {
  pattern {
    V -[nsubj]-> S;
    X -[cobj]-> V;
  }
  commands {
    S.rep=yes;
    S.recursive=yes;
  }
}

rule annotated_reported_nsubj_post {
  pattern {
    X -[root]-> R;
    R -[dobj]-> O;
    O -[punct]-> P1;
    O -[punct]-> P2;
    P1 [ upos=fe ];
    P2 [ upos=fe ];
    R -[nsubj]-> SP;
    R << SP;
  }
  commands {
    SP.rep=yes;
    SP.recursive=yes;
  }
}

rule annotated_reported_advcl {
  pattern {
    X -[advcl]-> R;
    R -[cobj]-> O;
    O -[nsubj]-> S;
    R [ form="según"];
  }
  commands {
    S.rep=yes;
    S.recursive=yes;
  }
}

rule annotated_reported_advcl_bareN {
  pattern {
    X -[advcl]-> R;
    R -[pobj]-> S;
    R [ form="según"];
  }
  commands {
    S.rep=yes;
    S.recursive=yes;
  }
}

rule annotated_reported_advcl_weirdAnn {
  pattern {
    X -[advcl]-> R;
    R -[cobj]-> O;
    O -[cobj]-> S;
    O << S;
    R [ form="según"];
  }
  commands {
    S.rep=yes;
    S.recursive=yes;
  }
}

strat S1 { Try ( Iter ( Alt ( annotated_reported_nsubj_post, annotated_reported_advcl, annotated_reported_advcl_bareN, annotated_reported_advcl_weirdAnn ) ) ) }



####



rule coordinated {
  pattern {
    A -[root]-> R;
    C -[coord]-> C1;
    e: X -> C;
  }
  commands {
    del_edge C -[coord]-> C1;
    add_edge e: X -> C1;
    C1.coord=yes;
  }
}

strat S1 { Onf ( Iter ( coordinated ) ) }



####



rule coordinated_root {
  pattern {
    A -[root]-> X;
    C -[coord]-> C1;
    e: X -> C;
  }
  commands {
    del_edge C -[coord]-> C1;
    add_edge e: X -> C1;
    C1.coord=yes;
  }
}

strat S1 { Onf ( Iter ( coordinated_root ) ) }



####



rule coordinated_ignore_cc {
  pattern {
    B [ upos=cc ];
    e: A -[^coord_fixed]-> B;
  }
  commands {
    del_edge e;
    add_edge A -[coord_fixed]-> B;
  }
}

strat S1 { Onf ( Iter ( coordinated_ignore_cc ) ) }

